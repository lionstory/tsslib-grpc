// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:

	service.proto
	vss.proto

It has these top-level messages:

	CommonResonse
	KeyGenPrepareRequest
	KeyGenStartRequest
	TransMsgRequest
	SignPrepareRequest
	SignCollectRequest
	SignCollectResponse
	SignStartRequest
	ReSharingPrepareRequest
	ReSharingStartRequest
	TransSmtMsgRequest
	SmtResharePrepareRequest
	SmtReshareStartRequest
	Share
	PublicKey
	Partner
	Project
	ProjectSetupRequest
	KeyGenerateRequest
	CmtMsg
	ShareMsg
	CommonRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResonse struct {
	Code string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *CommonResonse) Reset()                    { *m = CommonResonse{} }
func (m *CommonResonse) String() string            { return proto.CompactTextString(m) }
func (*CommonResonse) ProtoMessage()               {}
func (*CommonResonse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonResonse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CommonResonse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type KeyGenPrepareRequest struct {
	Urls      []string `protobuf:"bytes,1,rep,name=Urls" json:"Urls,omitempty"`
	PartyNum  int32    `protobuf:"varint,2,opt,name=PartyNum" json:"PartyNum,omitempty"`
	Threshold int32    `protobuf:"varint,3,opt,name=Threshold" json:"Threshold,omitempty"`
}

func (m *KeyGenPrepareRequest) Reset()                    { *m = KeyGenPrepareRequest{} }
func (m *KeyGenPrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyGenPrepareRequest) ProtoMessage()               {}
func (*KeyGenPrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeyGenPrepareRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *KeyGenPrepareRequest) GetPartyNum() int32 {
	if m != nil {
		return m.PartyNum
	}
	return 0
}

func (m *KeyGenPrepareRequest) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

type KeyGenStartRequest struct {
	Party     []byte `protobuf:"bytes,1,opt,name=Party,proto3" json:"Party,omitempty"`
	Parties   []byte `protobuf:"bytes,2,opt,name=Parties,proto3" json:"Parties,omitempty"`
	Threshold int32  `protobuf:"varint,3,opt,name=Threshold" json:"Threshold,omitempty"`
}

func (m *KeyGenStartRequest) Reset()                    { *m = KeyGenStartRequest{} }
func (m *KeyGenStartRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyGenStartRequest) ProtoMessage()               {}
func (*KeyGenStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyGenStartRequest) GetParty() []byte {
	if m != nil {
		return m.Party
	}
	return nil
}

func (m *KeyGenStartRequest) GetParties() []byte {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *KeyGenStartRequest) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

type TransMsgRequest struct {
	Message     []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Party       []byte `protobuf:"bytes,2,opt,name=Party,proto3" json:"Party,omitempty"`
	IsBroadcast bool   `protobuf:"varint,3,opt,name=IsBroadcast" json:"IsBroadcast,omitempty"`
}

func (m *TransMsgRequest) Reset()                    { *m = TransMsgRequest{} }
func (m *TransMsgRequest) String() string            { return proto.CompactTextString(m) }
func (*TransMsgRequest) ProtoMessage()               {}
func (*TransMsgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransMsgRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *TransMsgRequest) GetParty() []byte {
	if m != nil {
		return m.Party
	}
	return nil
}

func (m *TransMsgRequest) GetIsBroadcast() bool {
	if m != nil {
		return m.IsBroadcast
	}
	return false
}

type SignPrepareRequest struct {
	Message string   `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
	Urls    []string `protobuf:"bytes,2,rep,name=Urls" json:"Urls,omitempty"`
}

func (m *SignPrepareRequest) Reset()                    { *m = SignPrepareRequest{} }
func (m *SignPrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*SignPrepareRequest) ProtoMessage()               {}
func (*SignPrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SignPrepareRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SignPrepareRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type SignCollectRequest struct {
	Index int32 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
}

func (m *SignCollectRequest) Reset()                    { *m = SignCollectRequest{} }
func (m *SignCollectRequest) String() string            { return proto.CompactTextString(m) }
func (*SignCollectRequest) ProtoMessage()               {}
func (*SignCollectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignCollectRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type SignCollectResponse struct {
	Code string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *SignCollectResponse) Reset()                    { *m = SignCollectResponse{} }
func (m *SignCollectResponse) String() string            { return proto.CompactTextString(m) }
func (*SignCollectResponse) ProtoMessage()               {}
func (*SignCollectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SignCollectResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SignCollectResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SignCollectResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignStartRequest struct {
	Index   int32  `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	Parties []byte `protobuf:"bytes,2,opt,name=Parties,proto3" json:"Parties,omitempty"`
	Table   []byte `protobuf:"bytes,3,opt,name=Table,proto3" json:"Table,omitempty"`
	Msg     string `protobuf:"bytes,4,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *SignStartRequest) Reset()                    { *m = SignStartRequest{} }
func (m *SignStartRequest) String() string            { return proto.CompactTextString(m) }
func (*SignStartRequest) ProtoMessage()               {}
func (*SignStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SignStartRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SignStartRequest) GetParties() []byte {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *SignStartRequest) GetTable() []byte {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *SignStartRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ReSharingPrepareRequest struct {
	Urls         []string `protobuf:"bytes,1,rep,name=Urls" json:"Urls,omitempty"`
	Threshold    int32    `protobuf:"varint,3,opt,name=Threshold" json:"Threshold,omitempty"`
	OldThreshold int32    `protobuf:"varint,4,opt,name=OldThreshold" json:"OldThreshold,omitempty"`
}

func (m *ReSharingPrepareRequest) Reset()                    { *m = ReSharingPrepareRequest{} }
func (m *ReSharingPrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*ReSharingPrepareRequest) ProtoMessage()               {}
func (*ReSharingPrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReSharingPrepareRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *ReSharingPrepareRequest) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *ReSharingPrepareRequest) GetOldThreshold() int32 {
	if m != nil {
		return m.OldThreshold
	}
	return 0
}

type ReSharingStartRequest struct {
	Party          []byte `protobuf:"bytes,1,opt,name=Party,proto3" json:"Party,omitempty"`
	Parties        []byte `protobuf:"bytes,2,opt,name=Parties,proto3" json:"Parties,omitempty"`
	Threshold      int32  `protobuf:"varint,3,opt,name=Threshold" json:"Threshold,omitempty"`
	KeyRevision    int32  `protobuf:"varint,4,opt,name=KeyRevision" json:"KeyRevision,omitempty"`
	OldParty       []byte `protobuf:"bytes,5,opt,name=OldParty,proto3" json:"OldParty,omitempty"`
	OldParties     []byte `protobuf:"bytes,6,opt,name=OldParties,proto3" json:"OldParties,omitempty"`
	OldThreshold   int32  `protobuf:"varint,7,opt,name=OldThreshold" json:"OldThreshold,omitempty"`
	OldKeyRevision int32  `protobuf:"varint,8,opt,name=OldKeyRevision" json:"OldKeyRevision,omitempty"`
}

func (m *ReSharingStartRequest) Reset()                    { *m = ReSharingStartRequest{} }
func (m *ReSharingStartRequest) String() string            { return proto.CompactTextString(m) }
func (*ReSharingStartRequest) ProtoMessage()               {}
func (*ReSharingStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReSharingStartRequest) GetParty() []byte {
	if m != nil {
		return m.Party
	}
	return nil
}

func (m *ReSharingStartRequest) GetParties() []byte {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *ReSharingStartRequest) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *ReSharingStartRequest) GetKeyRevision() int32 {
	if m != nil {
		return m.KeyRevision
	}
	return 0
}

func (m *ReSharingStartRequest) GetOldParty() []byte {
	if m != nil {
		return m.OldParty
	}
	return nil
}

func (m *ReSharingStartRequest) GetOldParties() []byte {
	if m != nil {
		return m.OldParties
	}
	return nil
}

func (m *ReSharingStartRequest) GetOldThreshold() int32 {
	if m != nil {
		return m.OldThreshold
	}
	return 0
}

func (m *ReSharingStartRequest) GetOldKeyRevision() int32 {
	if m != nil {
		return m.OldKeyRevision
	}
	return 0
}

type TransSmtMsgRequest struct {
	FromId   []byte `protobuf:"bytes,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ToId     []byte `protobuf:"bytes,2,opt,name=ToId,proto3" json:"ToId,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty"`
	TaskName string `protobuf:"bytes,4,opt,name=TaskName" json:"TaskName,omitempty"`
}

func (m *TransSmtMsgRequest) Reset()                    { *m = TransSmtMsgRequest{} }
func (m *TransSmtMsgRequest) String() string            { return proto.CompactTextString(m) }
func (*TransSmtMsgRequest) ProtoMessage()               {}
func (*TransSmtMsgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TransSmtMsgRequest) GetFromId() []byte {
	if m != nil {
		return m.FromId
	}
	return nil
}

func (m *TransSmtMsgRequest) GetToId() []byte {
	if m != nil {
		return m.ToId
	}
	return nil
}

func (m *TransSmtMsgRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TransSmtMsgRequest) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

type SmtResharePrepareRequest struct {
	Urls         []string `protobuf:"bytes,1,rep,name=Urls" json:"Urls,omitempty"`
	NewThreshold int32    `protobuf:"varint,2,opt,name=NewThreshold" json:"NewThreshold,omitempty"`
	OldThreshold int32    `protobuf:"varint,3,opt,name=OldThreshold" json:"OldThreshold,omitempty"`
}

func (m *SmtResharePrepareRequest) Reset()                    { *m = SmtResharePrepareRequest{} }
func (m *SmtResharePrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*SmtResharePrepareRequest) ProtoMessage()               {}
func (*SmtResharePrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SmtResharePrepareRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *SmtResharePrepareRequest) GetNewThreshold() int32 {
	if m != nil {
		return m.NewThreshold
	}
	return 0
}

func (m *SmtResharePrepareRequest) GetOldThreshold() int32 {
	if m != nil {
		return m.OldThreshold
	}
	return 0
}

type SmtReshareStartRequest struct {
	Party        []byte `protobuf:"bytes,1,opt,name=Party,proto3" json:"Party,omitempty"`
	OldParties   []byte `protobuf:"bytes,2,opt,name=OldParties,proto3" json:"OldParties,omitempty"`
	NewParties   []byte `protobuf:"bytes,3,opt,name=NewParties,proto3" json:"NewParties,omitempty"`
	OldThreshold int32  `protobuf:"varint,4,opt,name=OldThreshold" json:"OldThreshold,omitempty"`
	NewThreshold int32  `protobuf:"varint,5,opt,name=NewThreshold" json:"NewThreshold,omitempty"`
	KeyRevision  int32  `protobuf:"varint,6,opt,name=KeyRevision" json:"KeyRevision,omitempty"`
	Table        []byte `protobuf:"bytes,7,opt,name=Table,proto3" json:"Table,omitempty"`
}

func (m *SmtReshareStartRequest) Reset()                    { *m = SmtReshareStartRequest{} }
func (m *SmtReshareStartRequest) String() string            { return proto.CompactTextString(m) }
func (*SmtReshareStartRequest) ProtoMessage()               {}
func (*SmtReshareStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SmtReshareStartRequest) GetParty() []byte {
	if m != nil {
		return m.Party
	}
	return nil
}

func (m *SmtReshareStartRequest) GetOldParties() []byte {
	if m != nil {
		return m.OldParties
	}
	return nil
}

func (m *SmtReshareStartRequest) GetNewParties() []byte {
	if m != nil {
		return m.NewParties
	}
	return nil
}

func (m *SmtReshareStartRequest) GetOldThreshold() int32 {
	if m != nil {
		return m.OldThreshold
	}
	return 0
}

func (m *SmtReshareStartRequest) GetNewThreshold() int32 {
	if m != nil {
		return m.NewThreshold
	}
	return 0
}

func (m *SmtReshareStartRequest) GetKeyRevision() int32 {
	if m != nil {
		return m.KeyRevision
	}
	return 0
}

func (m *SmtReshareStartRequest) GetTable() []byte {
	if m != nil {
		return m.Table
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonResonse)(nil), "service.CommonResonse")
	proto.RegisterType((*KeyGenPrepareRequest)(nil), "service.KeyGenPrepareRequest")
	proto.RegisterType((*KeyGenStartRequest)(nil), "service.KeyGenStartRequest")
	proto.RegisterType((*TransMsgRequest)(nil), "service.TransMsgRequest")
	proto.RegisterType((*SignPrepareRequest)(nil), "service.SignPrepareRequest")
	proto.RegisterType((*SignCollectRequest)(nil), "service.SignCollectRequest")
	proto.RegisterType((*SignCollectResponse)(nil), "service.SignCollectResponse")
	proto.RegisterType((*SignStartRequest)(nil), "service.SignStartRequest")
	proto.RegisterType((*ReSharingPrepareRequest)(nil), "service.ReSharingPrepareRequest")
	proto.RegisterType((*ReSharingStartRequest)(nil), "service.ReSharingStartRequest")
	proto.RegisterType((*TransSmtMsgRequest)(nil), "service.TransSmtMsgRequest")
	proto.RegisterType((*SmtResharePrepareRequest)(nil), "service.SmtResharePrepareRequest")
	proto.RegisterType((*SmtReshareStartRequest)(nil), "service.SmtReshareStartRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TssServer service

type TssServerClient interface {
	KeyGenPrepare(ctx context.Context, in *KeyGenPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	KeyGenStart(ctx context.Context, in *KeyGenStartRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	KeygenTransMsg(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SignPrepare(ctx context.Context, in *SignPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SignCollectParty(ctx context.Context, in *SignCollectRequest, opts ...grpc.CallOption) (*SignCollectResponse, error)
	SignStart(ctx context.Context, in *SignStartRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SignTransMsg(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	ReSharingPrepare(ctx context.Context, in *ReSharingPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	ReSharingInit(ctx context.Context, in *ReSharingStartRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	ReSharingStart(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CommonResonse, error)
	ReSharingTransMsgToOld(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	ReSharingTransMsgToNew(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtKeyGenPrepare(ctx context.Context, in *KeyGenPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtKeyGenStart(ctx context.Context, in *KeyGenStartRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtKeygenTransMsg(ctx context.Context, in *TransSmtMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtSignPrepare(ctx context.Context, in *SignPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtSignCollectParty(ctx context.Context, in *SignCollectRequest, opts ...grpc.CallOption) (*SignCollectResponse, error)
	SmtSignStart(ctx context.Context, in *SignStartRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtSignTransMsg(ctx context.Context, in *TransSmtMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtResharePrepare(ctx context.Context, in *SmtResharePrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtReshareStart(ctx context.Context, in *SmtReshareStartRequest, opts ...grpc.CallOption) (*CommonResonse, error)
	SmtReshareTransMsg(ctx context.Context, in *TransSmtMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error)
}

type tssServerClient struct {
	cc *grpc.ClientConn
}

func NewTssServerClient(cc *grpc.ClientConn) TssServerClient {
	return &tssServerClient{cc}
}

func (c *tssServerClient) KeyGenPrepare(ctx context.Context, in *KeyGenPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/KeyGenPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) KeyGenStart(ctx context.Context, in *KeyGenStartRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/KeyGenStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) KeygenTransMsg(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/KeygenTransMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SignPrepare(ctx context.Context, in *SignPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SignPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SignCollectParty(ctx context.Context, in *SignCollectRequest, opts ...grpc.CallOption) (*SignCollectResponse, error) {
	out := new(SignCollectResponse)
	err := grpc.Invoke(ctx, "/service.TssServer/SignCollectParty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SignStart(ctx context.Context, in *SignStartRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SignStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SignTransMsg(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SignTransMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) ReSharingPrepare(ctx context.Context, in *ReSharingPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/ReSharingPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) ReSharingInit(ctx context.Context, in *ReSharingStartRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/ReSharingInit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) ReSharingStart(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/ReSharingStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) ReSharingTransMsgToOld(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/ReSharingTransMsgToOld", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) ReSharingTransMsgToNew(ctx context.Context, in *TransMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/ReSharingTransMsgToNew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtKeyGenPrepare(ctx context.Context, in *KeyGenPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtKeyGenPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtKeyGenStart(ctx context.Context, in *KeyGenStartRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtKeyGenStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtKeygenTransMsg(ctx context.Context, in *TransSmtMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtKeygenTransMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtSignPrepare(ctx context.Context, in *SignPrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtSignPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtSignCollectParty(ctx context.Context, in *SignCollectRequest, opts ...grpc.CallOption) (*SignCollectResponse, error) {
	out := new(SignCollectResponse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtSignCollectParty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtSignStart(ctx context.Context, in *SignStartRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtSignStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtSignTransMsg(ctx context.Context, in *TransSmtMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtSignTransMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtResharePrepare(ctx context.Context, in *SmtResharePrepareRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtResharePrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtReshareStart(ctx context.Context, in *SmtReshareStartRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtReshareStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServerClient) SmtReshareTransMsg(ctx context.Context, in *TransSmtMsgRequest, opts ...grpc.CallOption) (*CommonResonse, error) {
	out := new(CommonResonse)
	err := grpc.Invoke(ctx, "/service.TssServer/SmtReshareTransMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TssServer service

type TssServerServer interface {
	KeyGenPrepare(context.Context, *KeyGenPrepareRequest) (*CommonResonse, error)
	KeyGenStart(context.Context, *KeyGenStartRequest) (*CommonResonse, error)
	KeygenTransMsg(context.Context, *TransMsgRequest) (*CommonResonse, error)
	SignPrepare(context.Context, *SignPrepareRequest) (*CommonResonse, error)
	SignCollectParty(context.Context, *SignCollectRequest) (*SignCollectResponse, error)
	SignStart(context.Context, *SignStartRequest) (*CommonResonse, error)
	SignTransMsg(context.Context, *TransMsgRequest) (*CommonResonse, error)
	ReSharingPrepare(context.Context, *ReSharingPrepareRequest) (*CommonResonse, error)
	ReSharingInit(context.Context, *ReSharingStartRequest) (*CommonResonse, error)
	ReSharingStart(context.Context, *google_protobuf.Empty) (*CommonResonse, error)
	ReSharingTransMsgToOld(context.Context, *TransMsgRequest) (*CommonResonse, error)
	ReSharingTransMsgToNew(context.Context, *TransMsgRequest) (*CommonResonse, error)
	SmtKeyGenPrepare(context.Context, *KeyGenPrepareRequest) (*CommonResonse, error)
	SmtKeyGenStart(context.Context, *KeyGenStartRequest) (*CommonResonse, error)
	SmtKeygenTransMsg(context.Context, *TransSmtMsgRequest) (*CommonResonse, error)
	SmtSignPrepare(context.Context, *SignPrepareRequest) (*CommonResonse, error)
	SmtSignCollectParty(context.Context, *SignCollectRequest) (*SignCollectResponse, error)
	SmtSignStart(context.Context, *SignStartRequest) (*CommonResonse, error)
	SmtSignTransMsg(context.Context, *TransSmtMsgRequest) (*CommonResonse, error)
	SmtResharePrepare(context.Context, *SmtResharePrepareRequest) (*CommonResonse, error)
	SmtReshareStart(context.Context, *SmtReshareStartRequest) (*CommonResonse, error)
	SmtReshareTransMsg(context.Context, *TransSmtMsgRequest) (*CommonResonse, error)
}

func RegisterTssServerServer(s *grpc.Server, srv TssServerServer) {
	s.RegisterService(&_TssServer_serviceDesc, srv)
}

func _TssServer_KeyGenPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).KeyGenPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/KeyGenPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).KeyGenPrepare(ctx, req.(*KeyGenPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_KeyGenStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).KeyGenStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/KeyGenStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).KeyGenStart(ctx, req.(*KeyGenStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_KeygenTransMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).KeygenTransMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/KeygenTransMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).KeygenTransMsg(ctx, req.(*TransMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SignPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SignPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SignPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SignPrepare(ctx, req.(*SignPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SignCollectParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SignCollectParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SignCollectParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SignCollectParty(ctx, req.(*SignCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SignStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SignStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SignStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SignStart(ctx, req.(*SignStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SignTransMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SignTransMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SignTransMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SignTransMsg(ctx, req.(*TransMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_ReSharingPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSharingPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).ReSharingPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/ReSharingPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).ReSharingPrepare(ctx, req.(*ReSharingPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_ReSharingInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSharingStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).ReSharingInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/ReSharingInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).ReSharingInit(ctx, req.(*ReSharingStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_ReSharingStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).ReSharingStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/ReSharingStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).ReSharingStart(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_ReSharingTransMsgToOld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).ReSharingTransMsgToOld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/ReSharingTransMsgToOld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).ReSharingTransMsgToOld(ctx, req.(*TransMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_ReSharingTransMsgToNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).ReSharingTransMsgToNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/ReSharingTransMsgToNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).ReSharingTransMsgToNew(ctx, req.(*TransMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtKeyGenPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtKeyGenPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtKeyGenPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtKeyGenPrepare(ctx, req.(*KeyGenPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtKeyGenStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtKeyGenStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtKeyGenStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtKeyGenStart(ctx, req.(*KeyGenStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtKeygenTransMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransSmtMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtKeygenTransMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtKeygenTransMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtKeygenTransMsg(ctx, req.(*TransSmtMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtSignPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtSignPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtSignPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtSignPrepare(ctx, req.(*SignPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtSignCollectParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtSignCollectParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtSignCollectParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtSignCollectParty(ctx, req.(*SignCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtSignStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtSignStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtSignStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtSignStart(ctx, req.(*SignStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtSignTransMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransSmtMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtSignTransMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtSignTransMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtSignTransMsg(ctx, req.(*TransSmtMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtResharePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmtResharePrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtResharePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtResharePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtResharePrepare(ctx, req.(*SmtResharePrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtReshareStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmtReshareStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtReshareStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtReshareStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtReshareStart(ctx, req.(*SmtReshareStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssServer_SmtReshareTransMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransSmtMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServerServer).SmtReshareTransMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TssServer/SmtReshareTransMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServerServer).SmtReshareTransMsg(ctx, req.(*TransSmtMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TssServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.TssServer",
	HandlerType: (*TssServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyGenPrepare",
			Handler:    _TssServer_KeyGenPrepare_Handler,
		},
		{
			MethodName: "KeyGenStart",
			Handler:    _TssServer_KeyGenStart_Handler,
		},
		{
			MethodName: "KeygenTransMsg",
			Handler:    _TssServer_KeygenTransMsg_Handler,
		},
		{
			MethodName: "SignPrepare",
			Handler:    _TssServer_SignPrepare_Handler,
		},
		{
			MethodName: "SignCollectParty",
			Handler:    _TssServer_SignCollectParty_Handler,
		},
		{
			MethodName: "SignStart",
			Handler:    _TssServer_SignStart_Handler,
		},
		{
			MethodName: "SignTransMsg",
			Handler:    _TssServer_SignTransMsg_Handler,
		},
		{
			MethodName: "ReSharingPrepare",
			Handler:    _TssServer_ReSharingPrepare_Handler,
		},
		{
			MethodName: "ReSharingInit",
			Handler:    _TssServer_ReSharingInit_Handler,
		},
		{
			MethodName: "ReSharingStart",
			Handler:    _TssServer_ReSharingStart_Handler,
		},
		{
			MethodName: "ReSharingTransMsgToOld",
			Handler:    _TssServer_ReSharingTransMsgToOld_Handler,
		},
		{
			MethodName: "ReSharingTransMsgToNew",
			Handler:    _TssServer_ReSharingTransMsgToNew_Handler,
		},
		{
			MethodName: "SmtKeyGenPrepare",
			Handler:    _TssServer_SmtKeyGenPrepare_Handler,
		},
		{
			MethodName: "SmtKeyGenStart",
			Handler:    _TssServer_SmtKeyGenStart_Handler,
		},
		{
			MethodName: "SmtKeygenTransMsg",
			Handler:    _TssServer_SmtKeygenTransMsg_Handler,
		},
		{
			MethodName: "SmtSignPrepare",
			Handler:    _TssServer_SmtSignPrepare_Handler,
		},
		{
			MethodName: "SmtSignCollectParty",
			Handler:    _TssServer_SmtSignCollectParty_Handler,
		},
		{
			MethodName: "SmtSignStart",
			Handler:    _TssServer_SmtSignStart_Handler,
		},
		{
			MethodName: "SmtSignTransMsg",
			Handler:    _TssServer_SmtSignTransMsg_Handler,
		},
		{
			MethodName: "SmtResharePrepare",
			Handler:    _TssServer_SmtResharePrepare_Handler,
		},
		{
			MethodName: "SmtReshareStart",
			Handler:    _TssServer_SmtReshareStart_Handler,
		},
		{
			MethodName: "SmtReshareTransMsg",
			Handler:    _TssServer_SmtReshareTransMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5d, 0x73, 0xf2, 0x44,
	0x14, 0x1e, 0xa0, 0x40, 0x39, 0x86, 0x0f, 0xb7, 0x15, 0x23, 0xad, 0x15, 0x73, 0xe1, 0x38, 0x5e,
	0xd0, 0x19, 0x1d, 0xaf, 0x9c, 0x71, 0x14, 0x6c, 0x2b, 0x56, 0xa0, 0x13, 0xf0, 0xc6, 0xbb, 0x40,
	0x8e, 0x01, 0x9b, 0x64, 0x31, 0x9b, 0x52, 0xf9, 0x15, 0xfe, 0x2d, 0x7f, 0xcd, 0xfb, 0x1b, 0xde,
	0xd9, 0xcd, 0x77, 0x02, 0x34, 0x53, 0xfa, 0xde, 0xed, 0x39, 0x7b, 0xf6, 0x79, 0xf6, 0x7c, 0x6e,
	0x02, 0x75, 0x86, 0xce, 0x66, 0xb5, 0xc0, 0xde, 0xda, 0xa1, 0x2e, 0x25, 0x55, 0x5f, 0xec, 0x5c,
	0x18, 0x94, 0x1a, 0x26, 0x5e, 0x0b, 0xf5, 0xfc, 0xe9, 0xaf, 0x6b, 0xb4, 0xd6, 0xee, 0xd6, 0xb3,
	0x52, 0xbe, 0x87, 0xfa, 0x80, 0x5a, 0x16, 0xb5, 0x55, 0x64, 0xd4, 0x66, 0x48, 0x08, 0x9c, 0x0c,
	0xa8, 0x8e, 0x72, 0xa1, 0x5b, 0xf8, 0xba, 0xa6, 0x8a, 0x35, 0x69, 0x41, 0x69, 0xc4, 0x0c, 0xb9,
	0x28, 0x54, 0x7c, 0xa9, 0xe8, 0x70, 0x7e, 0x8f, 0xdb, 0x3b, 0xb4, 0x1f, 0x1c, 0x5c, 0x6b, 0x0e,
	0xaa, 0xf8, 0xcf, 0x13, 0x32, 0x97, 0x9f, 0xfe, 0xc3, 0x31, 0x99, 0x5c, 0xe8, 0x96, 0xf8, 0x69,
	0xbe, 0x26, 0x1d, 0x38, 0x7d, 0xd0, 0x1c, 0x77, 0x3b, 0x7e, 0xb2, 0x04, 0x44, 0x59, 0x0d, 0x65,
	0x72, 0x09, 0xb5, 0xd9, 0xd2, 0x41, 0xb6, 0xa4, 0xa6, 0x2e, 0x97, 0xc4, 0x66, 0xa4, 0x50, 0xe6,
	0x40, 0x3c, 0x96, 0xa9, 0xab, 0x39, 0x6e, 0xc0, 0x71, 0x0e, 0x65, 0x71, 0x5e, 0x5c, 0x51, 0x52,
	0x3d, 0x81, 0xc8, 0x50, 0xe5, 0x8b, 0x15, 0x32, 0x41, 0x22, 0xa9, 0x81, 0xf8, 0x02, 0xc7, 0x02,
	0x9a, 0x33, 0x47, 0xb3, 0xd9, 0x88, 0x19, 0x01, 0x81, 0x0c, 0xd5, 0x11, 0x32, 0xa6, 0x19, 0xe8,
	0x53, 0x04, 0x62, 0x44, 0x5d, 0x8c, 0x53, 0x77, 0xe1, 0xa3, 0x21, 0xeb, 0x3b, 0x54, 0xd3, 0x17,
	0x1a, 0x73, 0x05, 0xc5, 0xa9, 0x1a, 0x57, 0x29, 0x7d, 0x20, 0xd3, 0x95, 0x91, 0x0e, 0x56, 0x8a,
	0xa7, 0x16, 0xf1, 0x04, 0x61, 0x2c, 0x46, 0x61, 0x54, 0xbe, 0xf1, 0x30, 0x06, 0xd4, 0x34, 0x71,
	0x11, 0x0f, 0xc6, 0xd0, 0xd6, 0xf1, 0x5f, 0x81, 0x50, 0x56, 0x3d, 0x41, 0x99, 0xc0, 0x59, 0xc2,
	0x96, 0xad, 0xf3, 0xe7, 0x96, 0x5b, 0xfd, 0xa2, 0xb9, 0x9a, 0xf0, 0x43, 0x52, 0xc5, 0x5a, 0xf9,
	0x1b, 0x5a, 0x1c, 0x30, 0x9d, 0x87, 0x2c, 0xf5, 0x81, 0x3c, 0x9c, 0x43, 0x79, 0xa6, 0xcd, 0x4d,
	0xf4, 0x81, 0x3d, 0x21, 0xe0, 0x3f, 0x89, 0x6a, 0x8b, 0xc2, 0xa7, 0x2a, 0x4e, 0x97, 0x9a, 0xb3,
	0xb2, 0x8d, 0x1c, 0xe5, 0x75, 0x30, 0xbd, 0x44, 0x01, 0x69, 0x62, 0xea, 0x91, 0xc1, 0x89, 0x30,
	0x48, 0xe8, 0x94, 0xff, 0x8a, 0xf0, 0x49, 0xc8, 0xf8, 0xe1, 0x4a, 0x8d, 0xd7, 0xc9, 0x3d, 0x6e,
	0x55, 0xdc, 0xac, 0xd8, 0x8a, 0xda, 0xfe, 0x55, 0xe2, 0x2a, 0xde, 0x2a, 0x13, 0x53, 0xf7, 0x28,
	0xcb, 0x02, 0x3a, 0x94, 0xc9, 0x15, 0x80, 0xbf, 0xe6, 0xc4, 0x15, 0xb1, 0x1b, 0xd3, 0x64, 0x3c,
	0xad, 0x66, 0x3d, 0x25, 0x5f, 0x41, 0x63, 0x62, 0xea, 0xf1, 0x4b, 0x9c, 0x0a, 0xab, 0x94, 0x56,
	0xd9, 0x00, 0x11, 0x4d, 0x31, 0xb5, 0xdc, 0x58, 0x5f, 0xb4, 0xa1, 0x72, 0xeb, 0x50, 0x6b, 0xa8,
	0xfb, 0xe1, 0xf0, 0x25, 0x9e, 0x95, 0x19, 0x1d, 0xea, 0x7e, 0x30, 0xc4, 0x9a, 0xc7, 0x68, 0x40,
	0x6d, 0x17, 0x6d, 0xaf, 0x1f, 0x6a, 0x6a, 0x20, 0x72, 0x1f, 0x67, 0x1a, 0x7b, 0x1c, 0x6b, 0x16,
	0xfa, 0x59, 0x0f, 0x65, 0x65, 0x03, 0xf2, 0xd4, 0xe2, 0xf5, 0xba, 0xd4, 0x1c, 0xcc, 0x91, 0x7b,
	0x05, 0xa4, 0x31, 0x3e, 0x47, 0x3e, 0x7b, 0xe3, 0x25, 0xa1, 0xcb, 0xc4, 0xa5, 0xb4, 0xa3, 0x02,
	0xde, 0x15, 0xa0, 0x1d, 0x11, 0xe7, 0x28, 0x81, 0x64, 0x32, 0x8a, 0x99, 0x64, 0x5c, 0x01, 0x8c,
	0xf1, 0x39, 0xd8, 0xf7, 0x0a, 0x3e, 0xa6, 0xc9, 0x53, 0x96, 0x19, 0xe7, 0xca, 0x3b, 0x9c, 0x4b,
	0x95, 0x54, 0x25, 0x5b, 0x52, 0x61, 0xd7, 0x55, 0x63, 0x5d, 0xf7, 0xed, 0xff, 0x12, 0xd4, 0x66,
	0x8c, 0x4d, 0xd1, 0xd9, 0xa0, 0x43, 0x6e, 0xa1, 0x9e, 0x98, 0xe6, 0xe4, 0xf3, 0x5e, 0xf0, 0x96,
	0xec, 0x9a, 0xf2, 0x9d, 0x76, 0xb8, 0x9d, 0x7c, 0x3b, 0xfa, 0xe2, 0x36, 0xc1, 0xbc, 0x26, 0x17,
	0x29, 0x94, 0x78, 0x5c, 0x0f, 0x60, 0x34, 0xee, 0x71, 0x6b, 0xa0, 0x1d, 0x4c, 0x65, 0x22, 0x87,
	0x96, 0xa9, 0x41, 0x7d, 0xe8, 0x1e, 0xb1, 0x71, 0x1b, 0xbb, 0x47, 0x76, 0x08, 0xef, 0xc5, 0x18,
	0x79, 0x13, 0xcf, 0x1f, 0xa1, 0x5e, 0xd6, 0x93, 0x40, 0xc9, 0x49, 0xdc, 0xb9, 0xdc, 0xbd, 0xe9,
	0x8f, 0xde, 0x1f, 0xa1, 0x16, 0x0e, 0x50, 0xf2, 0x59, 0xc2, 0x34, 0x57, 0x58, 0x7e, 0x02, 0x89,
	0xdb, 0x1e, 0x11, 0x94, 0xdf, 0xa1, 0x95, 0x1e, 0xab, 0xa4, 0x1b, 0xda, 0xee, 0x99, 0xb8, 0x7b,
	0xd1, 0xee, 0xa0, 0x1e, 0x1e, 0x19, 0xda, 0x2b, 0x97, 0x5c, 0x65, 0xa1, 0x72, 0x3a, 0xd6, 0x48,
	0x1e, 0x20, 0xed, 0x9e, 0xf7, 0xc1, 0xd2, 0x0b, 0x3e, 0x58, 0x7a, 0x37, 0xfc, 0x83, 0x65, 0x2f,
	0xc2, 0x6f, 0xd0, 0x0e, 0x11, 0x82, 0x60, 0xcc, 0xe8, 0xc4, 0xd4, 0x5f, 0x11, 0xa4, 0xdd, 0x58,
	0x63, 0x7c, 0x7e, 0x05, 0xd6, 0x10, 0x5a, 0x53, 0xcb, 0x7d, 0x93, 0xc6, 0xba, 0x81, 0x46, 0x08,
	0x75, 0x44, 0x6f, 0xfd, 0x0a, 0x1f, 0x7b, 0x30, 0xf1, 0xf6, 0xba, 0x48, 0x3a, 0x96, 0x18, 0xf9,
	0x2f, 0x5c, 0xe8, 0xe8, 0x26, 0x7b, 0x80, 0x33, 0x1f, 0xe6, 0xad, 0xfa, 0xec, 0x67, 0x90, 0x7c,
	0xc4, 0x57, 0xb7, 0xda, 0x2d, 0x34, 0x7d, 0x88, 0xe3, 0x62, 0x34, 0x16, 0xd1, 0x4e, 0x3e, 0x66,
	0xe4, 0xcb, 0xe8, 0x3e, 0x7b, 0x1e, 0xba, 0x03, 0xb5, 0xd9, 0x4c, 0xbd, 0x51, 0xe4, 0x8b, 0x1d,
	0x68, 0xb9, 0x7c, 0x1c, 0x02, 0x89, 0x4e, 0x1c, 0xe5, 0x66, 0xbf, 0xf9, 0x67, 0x7d, 0xfd, 0x68,
	0x78, 0x7f, 0x17, 0xd7, 0x3f, 0xac, 0xe7, 0xf3, 0x8a, 0x58, 0x7e, 0xf7, 0x3e, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0x36, 0x16, 0x95, 0x90, 0x0c, 0x00, 0x00,
}
